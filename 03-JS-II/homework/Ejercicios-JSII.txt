                                        Operadores de comparación 
                                     (`>` `>=` `<` `<=` `===` `!==`)

`>` `>=` `<` `<=`: este grupo de operadores cumplen la funcion como cualquier clase de matematica, assignando un valor 
                booleano a la operacion, osea, usamos estas expreciones para evaluar operaciones que drvolverian un valor 
                de verdadero o falso.

`===` `!==`: estos 2 tienen la facultad siguiente. 
            
            ===: Cuando ocupamos este operador, estamos pidiendole al programa que dé el maximo posible se nivel de comparacion en la 
            busqueda de SEMEJANZAS entre los factores
            Ejemplo:
               
                1 === 1;          // true
                1 === '1';        // false
            'perro' === 'perro';  // true
            'perro' === 'Perro';  // false

            !==: (No es igual, igual que:) asi lo entiende la maquina. Por lo que incrementara al maximo su nivel de comparacion en la 
            busqueda de DIFERENCIAS entre los factores
            Ejemplo:

                1 !== 1;          // false
                1 !== '1';        // true
            'perro' !== 'perro';  // false
            'perro' !== 'Perro';  // true   
----------------------------------------------------------------------------------------------------------------------------------------
                                      Operadores lógicos
                                        (&&, ||, !)
                                    
&&: El editor lo entiende este operador como (Y o and). Esto evaluará ambas expresiones y devolverá verdadero si AMBAS expresiones son
 `true`. Si una (o ambas) de ellas son falso, este operador devolverá `false`:
            Ejemplo;

                if (100 > 10 && 10 === 10) {
                    console.log('Ambas declaraciones son ciertas, este código se ejecutará');
                }

                if (10 === 9 && 10 > 9) {
                    console.log('Una de las declaraciones es false, por lo que && devolverá false, y este código no se ejecutará');
                }

                if (10 === 9 && 10 > 9) {
                    console.log('las 2 declaraciones son false, por lo que && devolverá false, y este código no se ejecutará');
                }

||: Esto significa (Ó u or). Determinará  si una (o ambas) de las expresiones es verdadero. Devolverá `true`
 y solo devolverá `false` si AMBAS expresiones son `falsas`:

            Ejemplos:

                if (100 > 10 || 10 === 10) {
                    console.log('Ambas declaraciones son ciertas, este código se ejecutará');
                }

                if (10 === 9 || 10 > 9) {
                    console.log('Una de las declaraciones es true, por lo que || devolverá true y este código se ejecutará');
                }

                if (10 === 9 || 1 > 9) {
                    console.log('Ambas declaraciones son falsas, por lo que || devolverá false y este código no se ejecutará');
                }

!: Este operador lo interpreta el editor de codigo como (NO o Not). Vimos este operador antes al determinar la igualdad (`!==`). 
 El operador NO devolverá el valor booleano opuesto de lo que se le pasa:

            Ejemplos:

                if (!false) {
                    console.log('El ! devolverá true, porque es lo contrario de false, así que ste código se ejecutará');
                }

                if (!(1 === 1)) {
                    console.log('1 es igual a 1, de modo que la expresión devuelve true. El operador ! devolverá lo contrario de eso,
                    por lo que este código NO se ejecutará');
                }

    Notas:
    * Las expresiones se evalúan en orden, y la computadora omitirá cualquier expresión redundante. En una declaración `&&`, si la
     primera expresión es `false`, la segunda expresión no se evaluará porque AMBAS expresiones deben ser `true`. Lo mismo para la 
     declaración `||`. Si la primera expresión es `verdadero`, la segunda no se evaluará porque solo debe haber una declaración 
     `verdadero` para cumplir con los requisitos del operador.

    * Usá paréntesis. Como vimos en el segundo ejemplo de operador `!`, usamos paréntesis para evaluar PRIMERO lo que estaba dentro de 
    los paréntesis, luego aplicamos el operador `!`. Podemos ajustar cualquier expresión entre paréntesis y se evaluará antes de 
    evaluar la expresión como un todo.
---------------------------------------------------------------------------------------------------------------------------------------------
                                             Bucles 
                                            ***for***

Un bucle es una evaluacion ciclica de expreciones que buscan un resultao entre una varidad limitada de opciones, segun cual sea 
la instruccion. Los bucles "for" están compuestos por una variable, una exprecion condicional y una exprecion que incremente o disminuya 
el valor inicial de la variable.

            Por ejemplo:

        for (let i = 0                 ; i < 10                 ; i++          ) {
// | Declaramos una variable | Expresión condcicional | Incrementamos la variable |
    console.log(i);
}

Es decir en este ejemplo declaramos nuestra variable "i" con un valor inicial en 0. en la exprecion coondicional le pedimos que 
llegue contando hasta el 10 pero que para cumplir con su objetivo ciclico cada ves que termine incremente 1 con el operador (++) 
que significa sume 1 a valor de la variable y vuelva a contar hasta que i sea igual, igual, igual a 10 o su exprecion sea (i === 10).
Para esto el valor de la exprecion codicional debe ser false, mientras sea true continuara evaluando. 

En resumidas cuentas. Lo que le pedimos al programa es que cuente del 0 a 10 y lo haga de 1 en 1.

exiten tambien los bucles infinitos y es es un ejemplo:
        for (let i = 0; i >= 0; i++) {
    console.log(i);

en este bucle podemos apreciar que... la exprecion condicional cambio, es decir como la estructura del bucle exige que la E.C (Exprecion 
Condicional) dé como resultado falso o false para terminar el ciclo, esta siempre será verdadero o true ya que definimos la variable
con valor inicial 0 (i = 0) y le predimos que cuente de 1 en 1 (i++) hata que "i" sea mayor o igual a 0 (i <= 0).

ADVERTENCIA: Este tipo de bucles interrumpirán su programa y puede bloquear su navegador web o computadora.


